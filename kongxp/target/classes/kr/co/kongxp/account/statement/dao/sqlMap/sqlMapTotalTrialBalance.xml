<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper  namespace="kr.co.kongxp.account.statement.dao.TotalTrialBalanceDAO">
	
	<resultMap type="totalTrialBalanceTO" id="totalTrialBalanceResult">
		<result property="leftDebtorBalance" column="LEFT_DEBTOR_BALANCE" />
		<result property="leftDebtorSum" column="LEFT_DEBTOR_SUM" />
		<result property="accountName" column="ACCOUNT_NAME" />
		<result property="rightCreditsSum" column="RIGHT_CREDITS_SUM" />
		<result property="rightCreditsBalance" column="RIGHT_CREDITS_BALANCE" />
    </resultMap>
        
 	<parameterMap id="proceduerResultMap" type="map">
      	<parameter property="approvalDate" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
      	<parameter property="errorCode" javaType="int" jdbcType="NUMERIC" mode="OUT" />
      	<parameter property="errorMsg" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
      	<parameter property="result" javaType="java.sql.ResultSet" jdbcType="CURSOR" mode="OUT" resultMap="totalTrialBalanceResult"/>
 	</parameterMap>
   
   	<select id="selectTotalTrialBalanceList" parameterType="string" resultMap="totalTrialBalanceResult">
    	<![CDATA[
   			SELECT j3.left_balance AS LEFT_DEBTOR_BALANCE
			,j3.LEFT_DEBTOR_SUM AS LEFT_DEBTOR_SUM
			,DECODE(gid,7,'합계',3,A_group_code,1,' '||B_ACCOUNT_NAME,0,'      '||j3.C_ACCOUNT_NAME) AS ACCOUNT_NAME
			,RIGHT_CREDITS_SUM AS RIGHT_CREDITS_SUM
			,j3.right_balance AS RIGHT_CREDITS_BALANCE
			,GID --그리드화면에 보여지는 색상 연출을 위해 사용
			FROM (
            SELECT ---ACCOUNT 테이블과의 두번째 조인,  하위계정의 부모코드와 a2 테이블의 계정명을 연결시켜준다
             a2.PARENT_ACCOUNT_INNER_CODE AS Acode --최상위계정 코드
            ,j2.group_code AS A_group_code --그룹코드(최상위계정의 이름)
            ,j2.PARENT_ACCOUNT_INNER_CODE AS Bcode --중위계정코드
            ,a2.ACCOUNT_NAME AS B_ACCOUNT_NAME --중위계정의 이름
            ,j2.ACCOUNT_INNER_CODE AS Ccode --최하위코드 --
            ,j2.C_ACCOUNT_NAME AS C_ACCOUNT_NAME --최하위코드의 이름
            ,SUM(j2.LEFT_DEBTOR_PRICE) AS LEFT_DEBTOR_SUM
            ,SUM(j2.RIGHT_CREDITS_PRICE) AS RIGHT_CREDITS_SUM
            ,SUM(j2.left_balance) AS left_balance
            ,SUM(j2.right_balance) AS right_balance
            ,grouping_id(a2.PARENT_ACCOUNT_INNER_CODE,j2.PARENT_ACCOUNT_INNER_CODE,j2.ACCOUNT_INNER_CODE) AS gid -- 이후 데이터를 정리하기 위해 사용함
            ,DENSE_RANK() over(ORDER BY j2.group_code) AS DRN ---최종적으로 자산,부채,자본,수익,비용,기타의 순서를 가지게 해줌
            FROM
            (
          SELECT ---- 첫번째 ACCOUNT 테이블과의  조인, 이후 활용될 차대변 합계와 잔액을 회계법칙에 맞게 확보한다
          CASE WHEN a.ACCOUNT_NAME NOT IN ('대손충당금','감가상각누계액')
          AND  a.GROUP_CODE IN  ('1.유동자산','2.비유동자산','7.판매관리비','9.영업 외 비용')
      		THEN SUM(LEFT_DEBTOR_PRICE-RIGHT_CREDITS_PRICE) ELSE 0 END AS  left_balance
      		,SUM(LEFT_DEBTOR_PRICE) AS LEFT_DEBTOR_PRICE
          ,a.ACCOUNT_NAME AS c_account_name ---최하위계정과 이어진 계정명
          ,a.parent_account_inner_code --최하위계정의 부모코드
          ,j.ACCOUNT_INNER_CODE -- 최하위 계정의 코드번호
          ,a.group_code ---최상위계정분류
          ,SUM(RIGHT_CREDITS_PRICE) AS RIGHT_CREDITS_PRICE
					,CASE WHEN a.ACCOUNT_NAME  IN ('대손충당금','감가상각누계액')	then ABS(SUM(RIGHT_CREDITS_PRICE-LEFT_DEBTOR_PRICE))
          WHEN a.GROUP_CODE  IN ('3.유동부채','4.비유동부채','5.자본','6.매출','8.영업 외 수익') THEN SUM(RIGHT_CREDITS_PRICE-LEFT_DEBTOR_PRICE) ELSE  0 END  AS right_balance
          FROM(
            SELECT E.ACCOUNT_INNER_CODE AS ACCOUNT_INNER_CODE
                ,NVL(E.LEFT_DEBTOR_PRICE,0) AS LEFT_DEBTOR_PRICE
                ,NVL(E.RIGHT_CREDITS_PRICE,0) AS RIGHT_CREDITS_PRICE
            FROM EARLY_STATEMENTS E
            WHERE E.ACCOUNT_PERIOD_NO = 'BRC-01_05'
            AND E.STATEMENTS_DIVISION = '재무'

            UNION ALL

            SELECT J.ACCOUNT_INNER_CODE AS ACCOUNT_INNER_CODE
                ,NVL(J.LEFT_DEBTOR_PRICE,0) AS LEFT_DEBTOR_PRICE
                ,NVL(J.RIGHT_CREDITS_PRICE,0) AS RIGHT_CREDITS_PRICE
            FROM SLIP S, JOURNAL J
            WHERE  S.ACCOUNT_PERIOD_NO = 'BRC-01_05'
            AND S.SLIP_NO = J.SLIP_NO
            AND S.APPROVAL_DATE <= #{approvalDate}) j  ---
            , account a --- 첫번째 조인으로 최하위계정과 이름을 이어줌, 동시에 이후 최상위계정코드와 맺어질 그룹코드도 확보해둠
            WHERE j.ACCOUNT_INNER_CODE=a.ACCOUNT_INNER_CODE
            GROUP BY a.GROUP_CODE,a.PARENT_ACCOUNT_INNER_CODE,j.ACCOUNT_INNER_CODE,a.ACCOUNT_NAME) j2 -- 가장 작은 그룹인 ACCOUNT_INNER_CODE 기준으로 SUM이 이루어진다
            , account a2
            WHERE j2.PARENT_ACCOUNT_INNER_CODE=a2.ACCOUNT_INNER_CODE --- 두번째 조인으로 하위계정의 부모코드와 a2 테이블의 이너코드를 연결시켜준다
            GROUP BY ROLLUP ((a2.PARENT_ACCOUNT_INNER_CODE,j2.GROUP_CODE),(j2.PARENT_ACCOUNT_INNER_CODE,a2.account_name),(j2.ACCOUNT_INNER_CODE,j2.C_ACCOUNT_NAME)))j3 ----롤업으로 각계정별 합계를 구합과 동시에 같은 레벨의 그룹을 같이 빠지도록 유도한다,
            --- 이 경우 (a2.PARENT_ACCOUNT_INNER_CODE,j2.GROUP_CODE) a2테이블의 부모코드가 자연히 이전에 확보해둔 그룹코드와 같은 레벨에 속함
         
            ORDER BY DRN,Bcode nulls FIRST,Ccode nulls FIRST,Acode nulls LAST
            ---DRN 을 가장 앞에 두어 정열(C코드순으로 정열됨), B코드가 없는것을 위로(A코드급이 위로감), C코드가 없는것을 위로(B코드급이 위로감)
   		]]>
   	</select>
    
    
</mapper>